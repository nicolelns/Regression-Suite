#! /usr/bin/python
# -*- coding: latin-1 -*-

import unittest
import sys
import os
import time, datetime
import re			
import cutSoup		
from selenium import selenium   

reload(sys)
sys.setdefaultencoding("utf-8")

BASEURL = raw_input("Please enter a BaseURL: ")
BROWSERS = ('firefox3 /Applications/Firefox 2.app/Contents/MacOS/firefox-bin', 'safari')
TEST = "The Cut Utility Navigation Update - STG - The Cut"

S = cutSoup.Parser(BASEURL)

CSS = open('../data/text/utilitynav.css.txt', 'r').readlines()		
DATA = S.utilitynav() 	

keys = DATA.keys()
values = DATA.values()


x = 0

"""
This is a test for The Cut Utility Navigation Update - Removing the Facebook button and adding share tool buttons:
The DATA file is generated by cutSoup.Parser(), customized for this module.

"""	
#########################################################################
#########################################################################
	

class UtilityNav(unittest.TestCase):

    def setUp(self):

        self.verificationErrors = []
        self.selenium = selenium("localhost", 4444, "*" + BROWSERS[x], BASEURL + '/')
        self.selenium.start()
	print "TESTING " + BASEURL + " in " + BROWSERS[x]
	
	########################################################################
    
    def test_new_navigation(self):
    	    
    	sel = self.selenium
        sel.open(BASEURL)
        sel.wait_for_page_to_load("50000")
        
        self.css()
        #self.click()
        #self.login()
        #self.reg()
        #self.img()
        #self.tw()
        #self.fb()
    	
        ########################################################################
	
    def css(self):	

	n = 0
	sel = self.selenium
        test = "Test A - Presence of Elements via CSS"
        print test
        
        # Loops through the data in the CSS file asserting each element is on the page
        
	for each in CSS:

	    self.hover()
	    c = CSS[n].strip('\n') 
        
            try:
                self.failUnless(sel.is_element_present("css=" + c))
                
            except AssertionError, e:
            	print "FAILURE " + c
            	self.verificationErrors.append(str(e))
                
            n += 1
            
        return    
            
        ########################################################################
        
    def click(self):
    	    
    	n = 0
    	sel = self.selenium
    	test = "Test B - Click and Wait for Page to Load"
    	print test
    	
    	for each in values:
	    
	    url = keys[n]	# Nth URL
	    data = values[n]	# Nth tuple	
	    xpath = data[0]	# Full xpath
	    env_url = data[1]	# URLs with redirects
	    text = data[2]	# Link Text	
	    title = data[3]	# Title
	   
	    try:
	    	self.hover()
	    	time.sleep(1)
	    	sel.click("link=" + text)
	    	#sel.click("//a[@href='" + url + "']")
	    	sel.wait_for_page_to_load("50000")
	
	    except Exception, e:
	    	print "FAIL CLICK, ", str(e), url
	    	self.verificationErrors.append(url + str(e))
	        	
	    #self.url_loc(title)
	    self.back()
	    n += 1
	    
	########################################################################
	
    def url_loc(self, t):
    	    
    	sel = self.selenium
    	self.t = t	# Title passed from self.click()
    	
    	title = sel.get_title()
    	
    	try:
    	    self.assertEqual(title, self.t)
    	    
        except AssertionError, e:
            print "FAIL, WRONG TITLE"
            print "TITLE PASSED TO FN: " + self.t
            print "TITLE FROM SEL: " + title
            
        return
            
        ########################################################################
        
    def login(self):
    	    
    	sel = self.selenium
    	test = "Test C - Login"
    	print test
    	
    	try:
    	    sel.click("link=Log In")
    	    
        except Exception, e:
            print "FAIL, CANNOT CLICK LOGIN ", str(e)
            self.verificationErrors.append("LOGIN FAIL")
            
        else:
            self.lightbox()
            
        return
        
        ########################################################################
        
    def reg(self):
    
    	sel = self.selenium
    	test = "Test D - Register"
    	print test
    	
    	try:
    	    sel.click("link=Register")
    	    
        except Exception, e:
            print "FAIL, CANNOT CLICK REGISTER ", str(e)
            self.verificationErrors.append("REGISTER FAIL")
            
        else:
            self.lightbox()
            
        return
    	    
        ########################################################################
        
    def lightbox(self):
    	    
    	sel = self.selenium
    	
    	try:
    	    sel.click("css=div.head h5.closelightbox")
    	    
        except Exception, e:
            print str(e) + " lightbox fail"
            
        return
            
        ########################################################################
        	    
    def img(self):
    	    
    	sel = self.selenium
    	test = "Test E - Magazine Image"
    	print test
    	
    	try:
    	    self.hover()
    	    sel.click("//img[@src='http://nymag.com/current_issue.jpg']")
    	    sel.wait_for_page_to_load("50000")
        
	except Exception, e:
	    print "FAIL, CURRENT ISSUE IMG NOT FOUND", str(e)
	    self.verificationErrors.append(str(e) + "IMG NOT FOUND")
	    
        else:
	    
	    self.back()
	
    	########################################################################
    	
    def fb(self):
    	    
    	"""
    	Facebook Share Tool Test
    	
    	PASSING CONDITIONS:  User can click on the Facebook buttons
    			     User can "Like" NYMag
    			     
    	FAILING CONDITIONS:  User cannot click on the Facebook buttons
    			     User cannot "Like" NYMag
    			     
    	"""
    	
    	sel = self.selenium
    	test = "Test G - Facebook Button"
    	print test
    	
    	try:
    	    #sel.click("//*[@class='liketext']")
            sel.click("css=span.liketext")
            time.sleep(4)
            f = sel.get_all_window_names()
            print f
            #sel.select_window("Log In | Facebook")
    	    
        except Exception, e:
            print "CANNOT CLICK FB LIKE", str(e)
            
        sel.close()
    	sel.select_window('null')
	
	########################################################################
	
    def tw(self):
    	    
    	"""
    	Twitter Share Tool Test
    	
    	PASSING CONDITIONS:  User can click on the Twitter buttons
    			     Lightbox appears
    			     Lightbox closes when user closes window
    			     
    	FAILING CONDITIONS:  User cannot click on the Twitter buttons
    			     Lightbox does not appear
    			     
    	"""
    	
    	sel = self.selenium
    	test = "Test F - Twitter Button"
    	print test
    	
    	try:
    	    #sel.click("//*[@class='twitter-follow-button']")
    	    sel.click("id=l")
    	    time.sleep(3)
            sel.select_window("_xd_0")
    	
        except Exception, e:
            print "CANNOT CLICK TWITTER", str(e)
               
        sel.close()
        sel.select_window("null")
    	    
    	########################################################################
        
    def count(self):
    	    
    	sel = self.selenium
    	test = "Test C - Correct Number of Links in Nav"
    	print test
    	    
    	links = sel.get_css_count("css=" + CSS[4].strip('\n'))
    	
	if links != 3:
    	    print "FAILURE, MISSING ITEMS IN NAV"
    	    self.verificationErrors.append("MISSING ITEMS IN NAV - " + str(links) + " LINKS")
            
        ########################################################################
        
    def hover(self):
    	    
    	sel = self.selenium
        sel.mouse_over("css=" + CSS[1].strip('\n'))
        time.sleep(2)
        
        return

        ########################################################################

    def back(self):
    	    
    	sel = self.selenium
    	sel.go_back()
    	sel.wait_for_page_to_load("50000")
    	
    	return

        ########################################################################

    def tearDown(self):

        self.selenium.stop()
        self.assertEqual([], self.verificationErrors)

#########################################################################
#########################################################################

for each in BROWSERS:

    suite = unittest.TestLoader().loadTestsFromTestCase(UtilityNav)
    unittest.TextTestRunner(verbosity=2).run(suite)
    x += 1
    

