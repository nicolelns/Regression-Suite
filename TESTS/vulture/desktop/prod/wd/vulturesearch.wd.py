import os
import sys
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
import unittest, time, re
import pickle
import Logger
import vultureSoup

reload(sys)
sys.setdefaultencoding("utf-8")

chromedriver = '/Library/Python/2.7/site-packages/chromedriver'

"""
The below code is for the Internet Explorer remote driver; These tests were developed on a Mac :)

"""

PROXY = "localhost:8080"

webdriver.DesiredCapabilities.INTERNETEXPLORER['proxy'] = {
    "httpProxy":PROXY,
    "ftpProxy":PROXY,
    "sslProxy":PROXY,
    "noProxy":None,
    "proxyType":"MANUAL",
    "class":"org.openqa.selenium.Proxy",
    "autodetect":False
}

BASEURL = 'http://www.vulture.com'
BROWSERS = ('chrome', 'firefox', 'ie')
TEST = "Vulture Search - Desktop"

L = Logger.MainLogger(BASEURL, TEST)

searchterms = ('romney', 'sunshine')

x = 0

"""
This is a test for the NY Mag Deals Newsletter - Adding the Newsletter to Grub Street article pages:
The DATA file is a pickle file generated by vultureSoup.Parser(), customized for this module.

"""	

#########################################################################
#########################################################################

class Search(unittest.TestCase):

    def setUp(self):
    	    
        if x == 0:
            self.driver = webdriver.Chrome(chromedriver)
            
        elif x == 1:    
            self.driver = webdriver.Firefox() 
            
        elif x == 2:
    	    self.driver = webdriver.Remote("http://localhost:4444/wd/hub", webdriver.DesiredCapabilities.INTERNETEXPLORER)
        
        #elif x == 3:
	    #self.driver = webdriver.Remote(desired_capabilities = {}, command_executor = "http://localhost:8080/wd/hub")
        
        self.driver.implicitly_wait(10)
        self.verificationErrors = []
	print "TESTING " + BASEURL + " in " + BROWSERS[x]
	
	########################################################################
	
    def test_search(self):
    	    
    	driver = self.driver
    	driver.get(BASEURL)
    	test = "Test A - Search"
    	print test
    	
    	n = 0
    	
    	for each in searchterms:
    		
    	    try:
    	    	driver.find_element_by_id('txt-ny-search').send_keys(searchterms[n])
    	    	driver.find_element_by_id('sc-vulture').click()
    	    	
    	    except Exception, e:
            	print "FAIL", searchterms[n]
            	L.log(BROWSERS[x], test, "FAIL, CANNOT FILL IN SEARCH BAR", searchterms[n], exception=str(e))    
            		
            else:
            	L.log(BROWSERS[x], test, "PASS, FILLING IN SEARCH BAR WORKS", searchterms[n])
    	    	driver.find_element_by_id('btn-ny-search').click()
    	    	time.sleep(10)
    	    	self.verify_content()
    	    	self.click(searchterms[n])
    	    	driver.back()
		
	    n += 1
    	    	    
        ########################################################################
   
    def click(self, searchterm):
    	    
    	driver = self.driver
    	test = "Test B - Functionality of Page"
    	print test
    	
    	self.searchterm = searchterm
    	click = ("http://nymag.com/srch?t=sw&tx=" + self.searchterm + "&N=272&No=0&fd=All&Ns=issuedate%7C1", 'oldest', 'type', "http://nymag.com/srch?t=sw&tx=" + self.searchterm + "&N=272&No=0&fd=All&Ns=Relevance%7C1", 'next', 'prev')
    	n = 0
    	
    	for each in click:
    	
    	    try:
    	    	driver.find_element_by_xpath("//a[@href='" + click[n] + "']").click()
    	    
            except Exception as e:
    	        print "FAILURE", str(e)
    	        L.log(BROWSERS[x], test, "FAIL, CANNOT FILL IN SEARCH BAR", click[n], exception=str(e))
    	        
    	    else:
    	        self.verify_content()
    	    
    	    n += 1
    
        ########################################################################
        
    def verify_content(self):
    	
    	driver = self.driver
    	search_page = driver.current_url
    	S = vultureSoup.Parser(search_page)
        S.search()

        ########################################################################
    	 
    def is_element_present(self, how, what):
    	    
        try: 
            self.driver.find_element(by=how, value=what)
        
        except NoSuchElementException, e: 
            return False
        
        return True
    
        ########################################################################
        
    def tearDown(self):
        self.driver.quit()
        self.assertEqual([], self.verificationErrors)

#########################################################################
#########################################################################

for x in range(0,3):

    suite = unittest.TestLoader().loadTestsFromTestCase(Search)
    unittest.TextTestRunner(verbosity=2).run(suite)
    x += 1
L.save()
    		
    		
