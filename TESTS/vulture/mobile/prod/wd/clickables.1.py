import selenium
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
import unittest, time, re
import pickle
import Logger
import vultureSoup

BROWSERS = ('android', 'iOS')
TEST = "Clickables Module - Mobile - Vulture Home Page"

L = Logger.MainLogger("http://www.vulture.com", TEST)

S = vultureSoup.Parser("http://www.vulture.com")
S.clickables()

CSS = open('../data/text/clickables.css.txt', 'r').readlines()
DATA = pickle.load(open('../data/pickle/clickables.data.p', 'rb'))

articles = DATA.keys()
links = DATA.values()
print len(links)

x = 0

"""
This is a regression test for the Clickables module on Vulture's home page:

Test 'a' is a 'presence' test:  Do the elements (via CSS selectors in the CSS file) appear on the page and in the correct spot?
Test 'b' is a 'content' test:  Do the elements contain the relevant data?  
Test 'c' is a 'functional' test:  Does the module work?  Do links work?  Do the right pages load?  

The DATA file is a pickle file generated by vultureSoup.Parser(), customized for this module.

IF ANY CHANGES TO THE MODULE HAPPEN, PLEASE ONLY CHANGE THE .TXT FILES IF YOU REALLY KNOW WHAT YOU ARE DOING!  LINE ORDER FOR DATA INSIDE FILES MATTERS!
"""	

#########################################################################
#########################################################################

class Clickables(unittest.TestCase):
	
    def setUp(self):
    	    
        self.driver = webdriver.Remote(desired_capabilities = {}, command_executor = "http://localhost:8080/wd/hub")
        self.driver.implicitly_wait(60)
        self.base_url = "http://www.vulture.com/"
        self.verificationErrors = []
    
    def test_a(self):
    	    
    	
        """ 
        Tests for the presence of elements in the module using CSS locators.  The CSS file contains the locators.
        This test is an 'assert' test: if any element is not present, the test fails
        """
        
        n = 0
        driver = self.driver
        driver.get(self.base_url)
        
        for each in CSS:
        	
            c = CSS[n].strip('\n')
        	
            try: 
            	self.assertTrue(self.is_element_present(By.CSS_SELECTOR, c))
        
            except AssertionError as e: 
            	self.verificationErrors.append(str(e))
            	print "FAILURE"
            	L.log(BROWSERS[0], "Test A - Presence", "FAIL, ELEMENT NOT FOUND", c, exception=str(e))
            	
            else:
                L.log(BROWSERS[0], "Test A - Presence", "PASS, ELEMENT FOUND", c)
                
            n += 1
            
        ########################################################################
        
    def test_c(self):
    	    
    	n = m = 0    
        driver = self.driver
        driver.get(self.base_url)
        wait = driver.implicitly_wait(30)
        
        for each in links:
        	
            article = links[n]
            
            for m in range(0,2):
            	 
                data = article[m]
                href = data[0]
    	    
    	        try:
    	            driver.find_element_by_xpath("//a[@href='" + href + "']").click()
    	            wait
        
                except Exception as e:
                    self.verificationErrors.append(str(e))	
            	    L.log(BROWSERS[0], "Test C - Function", "FAIL, LINK DOES NOT WORK", href)  
        
                else:
                    driver.back()
                    wait
                    L.log(BROWSERS[0], "Test C - Function", "PASS, LINK WORKS", href)
                
                m += 1    
    
            n += 1
            print n
            
        ########################################################################            
    
    def is_element_present(self, how, what):
    	    
        try: 
            self.driver.find_element(by=how, value=what)
        
        except NoSuchElementException, e: 
            return False
        
        return True
    
    def tearDown(self):
        self.driver.quit()
        self.assertEqual([], self.verificationErrors)

if __name__ == "__main__":
    unittest.main()
L.save()
