#! /usr/bin/python
# -*- coding: utf-8 -*-

import sys
import os
import re
import string
import urllib
import unittest
import time
import json
import pickle
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.remote.command import Command
from selenium.webdriver.remote.webdriver import WebDriver as RemoteWebDriver
from selenium.webdriver.remote.webelement import WebElement
from bs4 import BeautifulSoup

""" This is ready for refactoring. """

reload(sys)
sys.setdefaultencoding("utf-8")

URL = 'http://author.nymetro.com/'
QUERY = pickle.load(open('/Users/nsmith/Desktop/BETA/CUT/DATA/PICKLE/query.p', 'rb'))

class MyOpener(urllib.FancyURLopener):
    version = 'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.15) Gecko/20110303 Firefox/3.6.15'
    

class JSONParserPublish(unittest.TestCase):
	
    def setUp(self):
        
        try:   
            print 'about to get wd ff'
            self.driver = webdriver.Firefox()
        except Exception, e:
            print str(e)
        self.driver.implicitly_wait(10)
        self.verificationErrors = []
        print 'setup done'
    #########################################################################
    
    def test_login(self):
           
    	# Log in to CQ:
    	# Change the strings from admin/admin to a different username/password to change login credentials
    
        driver = self.driver
        print driver
        print "about to get url"
        driver.get(URL)
        print "Getting " + URL        
        try:
            driver.find_element_by_id("input-username").clear()
            driver.find_element_by_id("input-username").send_keys("nsmith")
            driver.find_element_by_id("input-password").clear()
            driver.find_element_by_id("input-password").send_keys("Guanwuk5")
            driver.find_element_by_id("input-submit").click()
            
        except AssertionError, e:
            print "FAILURE TO LOGIN", str(e)
            
        else:
            driver.get(QUERY)	
            self.data = self.scrape(self.get_src())
            d = open('/Users/nsmith/Desktop/BETA/CUT/DATA/TEXT/s.txt', 'w')
            d.write(self.data)
            d.close()
         
        ########################################################################
        
    def get_src(self):
    	    
    	driver = self.driver
        print driver.page_source
    	return driver.page_source
        
        ########################################################################
        
    def scrape(self, page):
    	 
    	self.page = page
        self.soup = BeautifulSoup(self.page)
        
        return self.soup('pre')[0].string
    
    def tearDown(self):
    	self.driver.quit()
    	
    #########################################################################
    #########################################################################

suite = unittest.TestLoader().loadTestsFromTestCase(JSONParserPublish)
unittest.TextTestRunner(verbosity=2).run(suite)
