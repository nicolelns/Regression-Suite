import selenium
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
import unittest, time, re
import subprocess
import pickle
import os
import Logger
import nymagSoup

BASEURL = 'http://qa.nymetro.com/daily/intel/2012/04/test-for-eve-vl-191.html'
BROWSERS = ('chrome', 'firefox', 'ie')     # Safari as subprocess
TEST = "Related Stories Module - QA - NYMag"

L = Logger.MainLogger(BASEURL, TEST)

S = nymagSoup.Parser("http://qa.nymetro.com/daily/intel/2012/04/test-for-eve-vl-191.html")
S.relatedstories()

CSS = open('../data/text/qa.relatedstories.css.txt', 'r').readlines()
DATA = pickle.load(open('../data/pickle/qa.relatedstories.data.p', 'rb'))

keys = DATA.keys()
values = DATA.values()

x = 0

"""
This is a test for the related stories element on the NY Mag Splash Pages:
The CSS file is hand-generated using Firebug.
The DATA file is a pickle file generated by vultureSoup.Parser(), customized for this module.

IF ANY CHANGES TO THE MODULE HAPPEN, PLEASE ONLY CHANGE THE .TXT FILES IF YOU REALLY KNOW WHAT YOU ARE DOING!  LINE ORDER FOR DATA INSIDE FILES MATTERS!
"""
#########################################################################
#########################################################################
	

class RelatedStories(unittest.TestCase):

    def setUp(self):
    	
    	self.driver = webdriver.Firefox()
        self.driver.implicitly_wait(60)
        self.base_url = BASEURL
        self.verificationErrors = []
	print "TESTING qa.nymetro in " + BROWSERS[x]
	
	########################################################################
    
    def test_a(self):

    # Tests for the presence of elements in the module using CSS locators
    # This test is an 'assert' test: if any element is not present, the test fails
	
	n = m = 0
	driver = self.driver
        driver.get(self.base_url)
        
        # Loops through the data in the CSS file asserting each element is on the page
        
	for each in CSS:

	    c = CSS[n].strip('\n') 
        
            try:
                self.assertTrue(self.is_element_present(By.CSS_SELECTOR, c))
                
            except AssertionError, e:
            	print "FAILURE " + c
            	self.verificationErrors.append(str(e) + c)
                L.log(BROWSERS[x], TEST, "FAIL, ELEMENT NOT FOUND", str(e) + c)
            
            else:
                L.log(BROWSERS[x], TEST, "PASS, ELEMENT FOUND", c)
                
            n += 1
             
    	for each in keys:
    		
    	    url = keys[m]
    	    data = values[m]
    	    title = data[1]
    	    
    	    if re.search('http://', url, re.I):
    	    	    
                if title is None:
    	    	
    	    	    L.log(BROWSERS[x], TEST, "FAIL, full url ('http://www.example.com') NO TITLE", url)
    	    	    
    	        else:
    	        	
    	            L.log(BROWSERS[x], TEST, "PASS, full url ('http://www.example.com') with title", url)	
    	            
    	    elif url[-5:] == ".html":
    	    	    
    	    	if title is None:
    	    		
    	    	    L.log(BROWSERS[x], TEST, "FAIL, partial url ('/foo/example.html') NO TITLE", url)
    	    	    
    	    	else:
    	        	
    	            L.log(BROWSERS[x], TEST, "PASS, partial url ('/foo/example.html') with title", url)		
    	            
    	    else:
    	    	    
    	    	if title is None:
    	    		
    	    	    L.log(BROWSERS[x], TEST, "PASS, partial url ('/foo/example') NO TITLE", url)
    	    	    
    	    	else:
    	        	
    	            L.log(BROWSERS[x], TEST, "PASS, partial url ('/foo/example/') with title", url)
    	            
    	    m += 1
            
        ########################################################################
        
    def test_c(self):
    	    
    	n = 0
	driver = self.driver
        driver.get(self.base_url)
        
        for each in keys:
        	
            href = keys[n]
            data = values[n]
            img = data[0]
            time.sleep(3)
            
            try:
    	        driver.find_element_by_xpath("//a[@href='" + href + "']").click()
    	        time.sleep(3)
        
            except Exception as e:
                self.verificationErrors.append(str(e) + href)	
            	L.log(BROWSERS[0], "Test C - Function", "FAIL, LINK DOES NOT WORK", href)  
        
            else:
                driver.back()
                time.sleep(3)
                L.log(BROWSERS[0], "Test C - Function", "PASS, LINK WORKS", href)
                
            if img is not None:
               
                try:
    	            driver.find_element_by_xpath("//img[@src='" + img + "']").click()
    	            time.sleep(3)
        
                except Exception as e:
                    self.verificationErrors.append(str(e) + img)	
            	    L.log(BROWSERS[0], "Test C - Function", "IMG, LINK DOES NOT WORK", img)  
        
                else:
                    driver.back()
                    time.sleep(3)
                    L.log(BROWSERS[0], "Test C - Function", "IMG, LINK WORKS", img)   
               
            n += 1
            
        ########################################################################
    
    def is_element_present(self, how, what):
    	    
        try: 
            self.driver.find_element(by=how, value=what)
        
        except NoSuchElementException, e: 
            return False
        
        return True
    
    def tearDown(self):
        self.driver.quit()
        self.assertEqual([], self.verificationErrors)

#########################################################################
#########################################################################

for x in range(0,3):

    suite = unittest.TestLoader().loadTestsFromTestCase(RelatedStories)
    unittest.TextTestRunner(verbosity=2).run(suite)
    x += 1
L.save()
