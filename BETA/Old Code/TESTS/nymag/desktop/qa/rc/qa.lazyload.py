#! /usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys
import unittest
import time, datetime
import re
import pickle
import Logger			# Logging module (for test results, outputs results to a .txt file)
import cutSoup     		# BeautifulSoup page scraper collects relevant data from qa.nymetro
from selenium import selenium 

reload(sys)
sys.setdefaultencoding("utf-8")

BASEURL = 'http://www.nymag.com'
BROWSERS = ('chrome', 'firefox', 'safari')
TEST = "NY Mag Navigation Update - Desktop - NY Mag"

#L = Logger.MainLogger("http://ec2.qa.nymetro.com/thecut/celebrity/#", TEST)

#S = nymagSoup.Parser('http://ec2.qa.nymetro.com/thecut/celebrity/#')
S.new_navigation()

CSS = open('../data/text/lazyload.css.txt', 'r').readlines()
FEED_DATA = pickle.load(open('../data/pickle/lazyload.data.p', 'rb'))

feed_keys = FEED_DATA.keys()
feed_values = FEED_DATA.values()
x = 0

"""
This is a test for the NY Magazine Lazy Load Ads:

Test 'a' is a 'presence' test:  Do the elements (via CSS selectors in the CSS file) appear on the page and in the correct spot?
Test 'b' is a 'content' test:  Do the elements contain the relevant data?  
Test 'c' is a 'functional' test:  Does the module work?  Do links work?  Do the right pages load?  

The DATA file is a pickle file generated by nymagSoup.Parser(), customized for this module.

IF ANY CHANGES TO THE MODULE HAPPEN, PLEASE ONLY CHANGE THE .TXT, .P and .JSON FILES IF YOU REALLY KNOW WHAT YOU ARE DOING!
"""	

class LazyLoad(unittest.TestCase):

    def setUp(self):

        self.verificationErrors = []
        self.selenium = selenium("localhost", 4444, "*" + BROWSERS[x], BASEURL)
        self.selenium.start()
        print "TESTING www.nymag.com in " + BROWSERS[x]
	
	########################################################################
	
    def test_a(self):
        
        # Tests for the presence of elements in the module using CSS locators
        # This test is an 'assert' test: if any element is not present, the test fails
	
        n = 0
        sel = self.selenium
        sel.open(BASEURL)
        sel.wait_for_page_to_load("50000")
        
        # Loops through the data in the CSS file asserting each element is on the page
        
        for each in CSS:

	    c = CSS[n].strip('\n')
            
            try:
                self.failUnless(sel.is_element_present("css=" + c))
                
            except AssertionError, e:
            	print "FAILURE " + c
            	self.verificationErrors.append(str(e))
                L.log(BROWSERS[x], TEST, "FAIL, ELEMENT NOT FOUND", str(e) + c)
            
            else:
                L.log(BROWSERS[x], TEST, "PASS, ELEMENT FOUND", c)
                
            n += 1
	
	########################################################################

    def tearDown(self):

        self.selenium.stop()
        self.assertEqual([], self.verificationErrors)

#########################################################################
#########################################################################

for each in BROWSERS:

    suite = unittest.TestLoader().loadTestsFromTestCase(LazyLoad)
    unittest.TextTestRunner(verbosity=2).run(suite)
    x += 1
L.save()
