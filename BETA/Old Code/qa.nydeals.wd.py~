#! /usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
import unittest, time, re
import pickle
import Logger

reload(sys)
sys.setdefaultencoding("utf-8")

chromedriver = '/Library/Python/2.7/site-packages/chromedriver'

"""
The below code is for the Internet Explorer remote driver; These tests were developed on a Mac :)
"""

PROXY = "localhost:8080"

webdriver.DesiredCapabilities.INTERNETEXPLORER['proxy'] = {
    "httpProxy":PROXY,
    "ftpProxy":PROXY,
    "sslProxy":PROXY,
    "noProxy":None,
    "proxyType":"MANUAL",
    "class":"org.openqa.selenium.Proxy",
    "autodetect":False
}

#USERNAME = raw_input("Please enter your NY Mag user name: ")
#PASSWORD = raw_input("Please enter your NY Mag password (It will not be stored, no one will see it): ") #Find a way to hide

BASEURL = 'http://newyork.grubstreet.dev.nymag.biz/2011/06/as_food_trucks_irk_the_upper_w.html?dfsdgdsgh=sdfsdgdshdshsdgdsghdshdsh'
BROWSERS = ('chrome', 'firefox', 'ie')
TEST = "NY Mag Navigation Update - Desktop - NY Mag"

L = Logger.MainLogger(BASEURL, TEST)

CSS = open('../data/text/grubnews.css.txt', 'r').readlines()
URLS = {'http://newyork.grubstreet.dev.nymag.biz/2011/06/as_food_trucks_irk_the_upper_w.html?dfsdgdsgh=sdfsdgdshdshsdgdsghdshdsh': 'As Food Trucks Irk the Upper West Side, Is Their Era On the Wane? -- Grub Street New York'}
# Eventually, URLS will be URLS = pickle.load(open ('../pickle/FILENAME.p', 'wb'))

keys = URLS.keys()
values = URLS.values()

x = 0

"""
This is a test for the NY Mag Deals Newsletter - Adding the Newsletter to Grub Street article pages:
The DATA file is a pickle file generated by vultureSoup.Parser(), customized for this module.
IF ANY CHANGES TO THE MODULE HAPPEN, PLEASE ONLY CHANGE THE .TXT, .P and .JSON FILES IF YOU REALLY KNOW WHAT YOU ARE DOING!
"""	

#########################################################################
#########################################################################

class Deals(unittest.TestCase):

    def setUp(self):
    	    
        if x == 0:
            self.driver = webdriver.Chrome(chromedriver)
            
        elif x == 1:    
            self.driver = webdriver.Firefox() 
            
        elif x == 2:
    	    self.driver = webdriver.Remote("http://localhost:4444/wd/hub", webdriver.DesiredCapabilities.INTERNETEXPLORER)
        
        #elif x == 3:
	    #self.driver = webdriver.Remote(desired_capabilities = {}, command_executor = "http://localhost:8080/wd/hub")
        
        self.driver.implicitly_wait(10)
        self.verificationErrors = []
        print "TESTING www.nymag.com in " + BROWSERS[x]
	
	########################################################################
	
    def test_deals(self):
        
        """
    	The fail test is meant to "fail", in the sense that the CSS elements should NOT be on the page after nav update.
    	The element not being found is considered a pass.
    	
    	PASSING CONDITIONS:  None of the elements are found on the page.
    	FAILING CONDITIONS:  Any of the elements are found on the page.
    	"""	
    
	n = 0
        driver = self.driver
        driver.get(BASEURL)
        test = "Test A - Presence of Elements via CSS"
        print test
        
        # Loops through the data in the CSS file asserting each element is on the page
        
        for each in CSS:

	    c = CSS[n].strip('\n')
            
            try:
                self.assertTrue(self.is_element_present(By.CSS_SELECTOR, c))
                
            except AssertionError, e:
            	print "FAILURE " + c
            	self.verificationErrors.append(str(e))
                L.log(BROWSERS[x], test, "FAIL, ELEMENT FOUND", c, exception=str(e))
            
            else:
                L.log(BROWSERS[x], test, "PASS, ELEMENT NOT FOUND", c)
                
            n += 1
           
        self.b_email_test()
            
        ########################################################################
            
    def b_email_test(self):
    	 
        driver = self.driver
        emails = ('foo', '', 'foo@somewhere.com')
        test = "Test B - Enter Email for NY Deals Ad"
        n = 0
        
        for n in range(0,3):
        
            try:
            	driver.find_element_by_id('txt-newsletter-subscribe-deals').send_keys(emails[n])
            	driver.find_element_by_id('btn-newsletters-deals').click()
            	
            except Exception, e:
            	print "FAIL", emails[n]
            	L.log(BROWSERS[x], test, "FAIL, CANNOT ENTER EMAIL INTO BOX", emails[n], exception=str(e))    
            		
            else:
            	if n == 2:
               	    L.log(BROWSERS[x], test, "PASS, EMAIL WORKS", emails[n])
        
		else:
		    L.log(BROWSERS[x], test, "FAIL, EMAIL DOES NOT WORK", emails[n])
		    
            driver.find_element_by_id('txt-newsletter-subscribe-deals').clear()
            n += 1
    	 
    	########################################################################
    	 
    def is_element_present(self, how, what):
    	    
        try: 
            self.driver.find_element(by=how, value=what)
        
        except NoSuchElementException, e: 
            return False
        
        return True
    
        ########################################################################
        
    def tearDown(self):
        self.driver.quit()
        self.assertEqual([], self.verificationErrors)

#########################################################################
#########################################################################

for x in range(0,3):

    suite = unittest.TestLoader().loadTestsFromTestCase(Deals)
    unittest.TextTestRunner(verbosity=2).run(suite)
    x += 1
L.save()

