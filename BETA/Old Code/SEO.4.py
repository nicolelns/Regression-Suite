#! /usr/bin/python

import unittest
import time, datetime
import re
import pickle
import Logger            	# Logging module (for test results, outputs results to a .txt file)
import vultureSoup		# BeautifulSoup page scraper collects relevant data from vulture.com
from selenium import selenium   # Update to WebDriver  

BASEURL = 'http://www.vulture.com'
BROWSERS = ('chrome', 'firefox')
TEST = "Basic SEO Test - Desktop - Vulture Home Page"

L = Logger.MainLogger(BASEURL, TEST)
S = vultureSoup.Parser()

S.SEO()			      

PAGES = open('../data/text/SEO.data.txt', 'r').readlines()
DATA = pickle.load(open('../data/pickle/SEO.data.p', 'rb'))

keys = DATA.keys()
values = DATA.values()

print DATA

L = Logger.MainLogger(BASEURL, TEST)
      
x = 0

"""
This is a regression test for SEO information on Vulture's pages:

Test 'b' is a 'content' test:  Do the elements contain the relevant data?  

The DATA file is a pickle file generated by vultureSoup.Parser(), customized for this module.

IF ANY CHANGES TO THE MODULE HAPPEN, PLEASE ONLY CHANGE THE .TXT FILES IF YOU REALLY KNOW WHAT YOU ARE DOING!  LINE ORDER FOR DATA INSIDE FILES MATTERS!
"""
#########################################################################
#########################################################################
	

class SEO(unittest.TestCase):

    def setUp(self):

        self.verificationErrors = []
        self.selenium = selenium("localhost", 4444, "*" + BROWSERS[x], BASEURL + '/')
        self.selenium.start()
	print "TESTING www.vulture.com in " + BROWSERS[x]
	
	########################################################################
	    
    def test_b(self):
    	    
    	"""
    	Tests to see that SEO tags contain content (tags are non-empty)
    	"""
    	
    	n = 0
    	sel = self.selenium
        sel.open("/")
	sel.wait_for_page_to_load("50000")
	
    	for each in PAGES:
    		
    	    p = PAGES[n].strip('\n')
    	    data = values[n]
    	    
    	    keywords = data[0]
    	    description = data[1]
    	    
    	    sel.open(p)
    	    sel.wait_for_page_to_load("50000")
    	    
    	    title = sel.get_title()
    	    
    	    if len(title) > 0:
                L.log(BROWSERS[x], "Test B - Content", "PASS, GOT TITLE", title)
            
            else:
                self.verificationErrors.append(title)
                L.log(BROWSERS[x], "Test B - Content", "FAIL, NO TITLE", title, exception=str(e))
                
            if description is not None:    
                
                if len(description) > 0:
                    L.log(BROWSERS[x], "Test B - Content", "PASS, DESCRIPTION PRESENT", description)
            
            else:
                self.verificationErrors.append(description)
                L.log(BROWSERS[x], "Test B - Content", "FAIL, NO DESCRIPTION", p)

            if keywords is not None:

                if len(keywords) > 0:
                    L.log(BROWSERS[x], "Test B - Content", "PASS, KEYWORDS PRESENT", keywords)
            
            else:
                self.verificationErrors.append(keywords)
                L.log(BROWSERS[x], "Test B - Content", "FAIL, NO KEYWORDS", p)
                
            n += 1
            
        ########################################################################

    def tearDown(self):

        self.selenium.stop()
        self.assertEqual([], self.verificationErrors)

#########################################################################
#########################################################################

for each in BROWSERS:

    suite = unittest.TestLoader().loadTestsFromTestCase(SEO)
    unittest.TextTestRunner(verbosity=2).run(suite)
    x += 1
L.save()